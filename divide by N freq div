PROGRAM 
module Frequency_Divider_N #(
    parameter N = 4  // Division Factor (e.g., 4 → divide by 4)
)(
    input clk,       // Input clock
    input rst,       // Reset
    output reg clk_out // Divided clock output
);

reg [$clog2(N)-1:0] count; // Counter variable

always @(posedge clk or posedge rst) begin
    if (rst) begin
        count <= 0;
        clk_out <= 0;
    end else if (count == (N/2 - 1)) begin
        clk_out <= ~clk_out; // Toggle output
        count <= 0; // Reset counter
    end else begin
        count <= count + 1;
    end
end

endmodule


TESTBENCH
module Frequency_Divider_N_tb;

reg clk;
reg rst;
wire clk_out;

// Instantiate Frequency Divider (Divide by 4)
Frequency_Divider_N #(.N(4)) uut (
    .clk(clk),
    .rst(rst),
    .clk_out(clk_out)
);

// Generate Clock (50 MHz)
always #10 clk = ~clk; // Period = 20 ns → Frequency = 50 MHz

initial begin
    $monitor("Time = %0t | clk = %b | clk_out = %b", $time, clk, clk_out);

    clk = 0;
    rst = 1; #20;
    rst = 0; #400; // Run simulation
    $stop;
end

endmodule
