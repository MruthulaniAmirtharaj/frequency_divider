PROGRAM 
module Frequency_Divider_2 (
    input clk,        // Input clock
    input rst,        // Reset signal
    output reg clk_out // Divided clock output
);

always @(posedge clk or posedge rst) begin
    if (rst)
        clk_out <= 0;  // Reset output clock to 0
    else
        clk_out <= ~clk_out; // Toggle output every clock cycle
end

endmodule 

TESTBENCH 
module Frequency_Divider_2_tb;

reg clk;
reg rst;
wire clk_out;

// Instantiate Frequency Divider
Frequency_Divider_2 uut (
    .clk(clk),
    .rst(rst),
    .clk_out(clk_out)
);

// Generate Clock (50 MHz)
always #10 clk = ~clk; // Period = 20 ns â†’ Frequency = 50 MHz

initial begin
    $monitor("Time = %0t | clk = %b | clk_out = %b", $time, clk, clk_out);

    clk = 0;
    rst = 1; #20; // Apply reset
    rst = 0; #200; // Run simulation
    $stop;
end

endmodule
